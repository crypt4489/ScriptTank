

	//User type structures
	//this is the info stored in the User base class.
	//this will be stored within all 'User' entries.

	"Generic User" : [
		{
			"email"
			"name"
			"phoneNumber"
			"fb_id"
			"type"
			"token"
	]	}

	
	//my thing. the only thing to know is that if you need to create another folder
	//follow my example with permissions, which is a folder within the editor entry
	//for example, for a Publisher user type, he could have a folder for 
	//writers they work with. How this is organized and indexed in the folder is up to
	//you. You might also have to create another JSON object to hold info for things
	//stored in that folder. 
	"Editor" : [
		{
			"Associations"
			"Experience"
			"Employer"
			"Specialization"
			"Permissions" : [
				{
				}
			]	
		}
	]
	


// main database structure
{
	"Users" : [
		{
		//key is the http push key generated by firebase. this key is grabbed and 		//stored on the device profile
			"key" : [
				{
					//enter in user object
				}
			]
		}
	]
        //any user can be addressed by using the following root directory: /Users/{key}/
	//from there any user value can be grabbed. For example, the path to grab an 
	//editor's associations would be /Users/{key}/Associations/ and this will give the
	//value stored there. 

}

/*for files store on FB fire storage paths should be:
	/Files/{key}/
	
	From there all files will be stored in there for each user. Possible thing to do is add user
	ability to create subfolders within their directory. Honestly, I am not working with storing files (DEL) so that might need to be something that you (DEL) think of more. 

I think I might add a messages table for IMs, but we'll see...

Otherwise, you guys should come up with something similar to this document. I am not sure what Mahadev wants for the next presentation, but this should be the base level thing to do for you guys to understand how to structure this DB and handle data for your specific user type. Also, since we'll all be interfacing with other user types, it will be nice to have the structure laid out. 

*/

